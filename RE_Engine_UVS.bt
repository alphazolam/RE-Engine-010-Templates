//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: RE_UVS.bt
//   Authors: alphaZomega
//   Version: 0.2
//   Purpose: 
//  Category: RE Engine
// File Mask: *.uvs.*
//  ID Bytes: 
//   History: Nov 20 2021
//------------------------------------------------

local uint i <hidden=true>, j <hidden=true>, k <hidden=true>;

struct uvHeader {
  unsigned int magic;
  unsigned int textureNum;
  unsigned int sequenceNum;
  unsigned int patternNum;
  unsigned int attribute;
  unsigned int reserve;
  uint64 texturePtr;
  uint64 sequencePtr;
  uint64 patternPtr;
  uint64 stringPtr;
};

struct uvTextureData {
  unsigned int uniqueID;
  unsigned int padding;
  wchar_t path[4];
};

struct uvSequenceData {
  unsigned int patternNum;
  unsigned int patternIndex;
};

struct uvPatternData
{
    unsigned __int64 uvTrans : 3;
    unsigned __int64 reserved : 61 <hidden=true>;
    float left;
    float top;
    float right;
    float bottom;
    int textureIndex;
    int cutoutUVCount;
    for (k=0; k<cutoutUVCount; k++) {
        float U;
        float V;
    }
};

struct uvTexture {
    local uint index = i;
    uint64 mStateHolder;
    uint64 mDataPtr;
    int64 mTextureHandleTbl[3];
    FSeek(Header.stringPtr + mDataPtr*2);
    wstring name;
    FSeek(startof(mTextureHandleTbl[2])+8);
};

    wstring ReadUVTexture(uvTexture &t) {return t.name;} //{return Strings.String[t.index].str;}


struct uvPattern {
    local uint index = i;
    uvPatternData PatternData;
};

    wstring ReadUVPatternData(uvPatternData &u) { if (exists(Strings.String[u.textureIndex])) return Strings.String[u.textureIndex].str; return ""; }


struct uvSequence {
    uint32 mDataPtr;
    uint32 mPatternTbl;
    FSeek(Header.patternPtr + mPatternTbl*32);
    uvPatternData PatternData[mDataPtr] <optimize=false, read=ReadUVPatternData>;
    FSeek(startof(mPatternTbl)+4);
};

typedef struct { wstring str; } STRING <read=ReadSTRING>;
    wstring ReadSTRING(STRING &s) {return s.str;}

//start of file:
uvHeader Header;

FSeek(Header.stringPtr);
if (Header.patternNum)
struct {
    for (i=0; i<Header.textureNum; i++)
        STRING String;
} Strings;
FSeek(Header.texturePtr);
if (Header.textureNum)
    struct {
        for (i=0; i<Header.textureNum; i++)
            uvTexture Texture <read=ReadUVTexture>;
    } Textures;


FSeek(Header.patternPtr);
if (Header.patternNum)
    uvPatternData Pattern[Header.patternNum] <optimize=false, hidden=true>;

FSeek(Header.sequencePtr);
if (Header.sequenceNum)
    struct {
        uvSequence Sequence[Header.sequenceNum] <optimize=false>;
    } Sequences;
